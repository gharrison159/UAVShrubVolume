size = 2)
library(terra)
library(sp)
library(sf)
shp <- vect("Outputs\\ShrubDelineation\\IndvShrub_Delineation_VWF.shp")
sf <- st_as_sf(shp)
st_crs(sf)
plot(las) |> add_treetops3d(ttops)
plot(las) |> add_treetops3d(sf)
st_crs(las)
plot(las)
plot(sf, add = TRUE)
# Create a new plot with the las object
plot(las)
# Add the sf object to the existing plot
plot(sf, add = TRUE)
library(htmlwidgets)
# Create an rgl device and plot the las object
rgl.open()
plot(las)
# Convert the sf object to a mesh3d object
sf_mesh <- sf::st_as_mesh3d(sf)
# Add the sf object to the rgl scene
shade3d(sf_mesh, col = "red", alpha = 0.5)
# Use rglwidget to create an HTML widget that combines the rgl scene and sf object
widget <- rglwidget()
# View the widget in the RStudio Viewer pane
viewer <- htmltools::HTML(widget)
viewer
sf <- as(shp, "sf")
sf <- as_sf(shp)
sf <- sf::as_Spatial(shp)
sf <- sf::as_sf(shp)
sf <- st_as_sf(shp)
str(shp)
str(sf)
# Plot the las object using `plot()` from the `lidR` package
plot(las)
# Plot the `sf` object on top of the `las` object using `plot()` from the `ggplot2` package
library(ggplot2)
plot(sf, add = TRUE)
plot(las)
# Extract the coordinates of the `sf` object using `st_coordinates()` from the `sf` package
coords <- st_coordinates(sf)
# Add the `sf` object to the RGL device using `rgl.triangles()` from the `rgl` package
triangles <- t(convhulln(coords))
rgl.triangles(coords[, 1], coords[, 2], coords[, 3], triangles, col = "red", alpha = 0.5)
library(rgl)
# Plot the las object using `plot()` from the `lidR` package
plot(las)
# Extract the coordinates of the `sf` object using `st_coordinates()` from the `sf` package
coords <- st_coordinates(sf)
# Add the `sf` object to the RGL device using `rgl.triangles()` from the `rgl` package
triangles <- t(convhulln(coords))
rgl.triangles(coords[, 1], coords[, 2], coords[, 3], triangles, col = "red", alpha = 0.5)
library(grDevices)
# Plot the las object using `plot()` from the `lidR` package
plot(las)
# Extract the coordinates of the `sf` object using `st_coordinates()` from the `sf` package
coords <- st_coordinates(sf)
# Calculate the convex hull of the `sf` object using `chull()` from the `grDevices` package
hull <- chull(coords[,1], coords[,2])
# Add the `sf` object to the RGL device using `rgl.triangles()` from the `rgl` package
triangles <- t(convhulln(coords[hull,]))
rgl.triangles(coords[hull, 1], coords[hull, 2], coords[hull, 3], triangles, col = "red", alpha = 0.5)
rgl::rgl.triangles(coords[hull, 1], coords[hull, 2], coords[hull, 3], triangles, col = "red", alpha = 0.5)
rgl.triangles(coords[hull, 1], coords[hull, 2], coords[hull, 3], triangles, col = "red", alpha = 0.5)
# Plot the LAS object using `plot()` from the `lidR` package
plot(las)
# Extract the coordinates of the `sf` object using `st_coordinates()` from the `sf` package
coords <- st_coordinates(sf)
# Calculate the convex hull of the `sf` object using `chull()` from the `grDevices` package
hull <- chull(coords[,1], coords[,2])
# Add the `sf` object to the RGL device using `rgl.triangles()` from the `rgl` package
triangles <- t(convhulln(coords[hull,]))
rgl.triangles(coords[hull, 1], coords[hull, 2], coords[hull, 3], triangles, col = "red", alpha = 0.5)
# Plot the LAS object using `plot()` from the `lidR` package
plot(las)
# Extract the coordinates of the `sf` object using `st_coordinates()` from the `sf` package
coords <- st_coordinates(sf)
# Calculate the convex hull of the `sf` object using `chull()` from the `grDevices` package
hull <- chull(coords[,1], coords[,2])
# Add the `sf` object to the RGL device using `rgl.triangles()` from the `rgl` package
triangles <- t(convhulln(coords[hull,]))
rgl.triangles(coords[hull, 1], coords[hull, 2], coords[hull, 3], col = "red", alpha = 0.5)
library(geometry)
# Plot the LAS object using `plot()` from the `lidR` package
plot(las)
# Extract the coordinates of the `sf` object using `st_coordinates()` from the `sf` package
coords <- st_coordinates(sf)
# Calculate the convex hull of the `sf` object using `chull()` from the `grDevices` package
hull <- chull(coords[,1], coords[,2])
# Add the `sf` object to the RGL device using `rgl.triangles()` from the `rgl` package
triangles <- t(geometry::convhulln(coords[hull,]))
rgl.triangles(coords[hull, 1], coords[hull, 2], coords[hull, 3], col = "red", alpha = 0.5)
# Plot the las object using `plot()` from the `lidR` package
plot(las)
# Extract the coordinates of the `sf` object using `st_coordinates()` from the `sf` package
coords <- st_coordinates(sf)
# Calculate the convex hull of the `sf` object using `chull()` from the `grDevices` package
hull <- chull(coords[,1], coords[,2])
# Calculate the Delaunay triangulation of the `sf` object using `delaunayn()` from the `geometry` package
triangles <- t(geometry::delaunayn(coords[hull,]))
# Add the `sf` object to the RGL device using `rgl.triangles()` from the `rgl` package
rgl.triangles(coords[hull, 1], coords[hull, 2], coords[hull, 3], triangles, col = "red", alpha = 0.5)
# Plot the las object using `plot()` from the `lidR` package
plot(las)
# Extract the coordinates of the `sf` object using `st_coordinates()` from the `sf` package
coords <- st_coordinates(sf)
# Calculate the convex hull of the `sf` object using `chull()` from the `grDevices` package
hull <- chull(coords[,1], coords[,2])
# Calculate the Delaunay triangulation of the `sf` object using `delaunayn()` from the `geometry` package
triangles <- geometry::delaunayn(coords[hull,])
# Add the `sf` object to the RGL device using `rgl.triangles()` from the `rgl` package
rgl.triangles(coords[hull, 1], coords[hull, 2], coords[hull, 3], triangles, col = "red", alpha = 0.5)
# Plot the las object using `plot()` from the `lidR` package
plot(las)
# Extract the coordinates of the `sf` object using `st_coordinates()` from the `sf` package
coords <- st_coordinates(sf)
# Calculate the convex hull of the `sf` object using `chull()` from the `grDevices` package
hull <- chull(coords[,1], coords[,2])
# Calculate the Delaunay triangulation of the `sf` object using `delaunayn()` from the `geometry` package
triangles <- geometry::delaunayn(coords[hull,], options = "Qz")
# Add the `sf` object to the RGL device using `rgl.triangles()` from the `rgl` package
rgl.triangles(coords[hull, 1], coords[hull, 2], coords[hull, 3], triangles, col = "red", alpha = 0.5)
# Plot the las object using `plot()` from the `lidR` package
plot(las)
# Extract the coordinates of the `sf` object using `st_coordinates()` from the `sf` package
coords <- st_coordinates(sf)
# Calculate the convex hull of the `sf` object using `chull()` from the `grDevices` package
hull <- chull(coords[,1], coords[,2])
# Calculate the Delaunay triangulation of the `sf` object using `delaunayn()` from the `geometry` package
triangles <- geometry::delaunayn(coords[hull,], options = "Qz")
# Add the `sf` object to the RGL device using `rgl.triangles()` from the `rgl` package
rgl.triangles(coords[hull, 1], coords[hull, 2], coords[hull, 3], triangles, col = "red", alpha = 0.5)
# Rotate the RGL device
rgl.viewpoint(theta = 30, phi = 30, fov = 70, zoom = 0.8)
# Plot the las object using `plot()` from the `lidR` package
plot(las)
# Extract the coordinates of the `sf` object using `st_coordinates()` from the `sf` package
coords <- st_coordinates(sf)
# Calculate the convex hull of the `sf` object using `chull()` from the `grDevices` package
hull <- chull(coords[,1], coords[,2])
# Calculate the Delaunay triangulation of the `sf` object using `delaunayn()` from the `geometry` package
triangles <- geometry::delaunayn(coords[hull,], options = "Qz")
# Add the `sf` object to the RGL device using `rgl.triangles()` from the `rgl` package
rgl.triangles(coords[hull, 1], coords[hull, 2], coords[hull, 3], triangles, col = "red", alpha = 0)
# Plot the las object using `plot()` from the `lidR` package
plot(las)
# Extract the coordinates of the `sf` object using `st_coordinates()` from the `sf` package
coords <- st_coordinates(sf)
# Calculate the convex hull of the `sf` object using `chull()` from the `grDevices` package
hull <- chull(coords[,1], coords[,2])
# Calculate the Delaunay triangulation of the `sf` object using `delaunayn()` from the `geometry` package
triangles <- geometry::delaunayn(coords[hull,], options = "Qz")
# Add the `sf` object to the RGL device using `rgl.triangles()` from the `rgl` package
rgl.triangles(coords[hull, 1], coords[hull, 2], coords[hull, 3], triangles, col = "white", alpha = 0)
# Create a bounding box around the las file
bb <- lasboundary(las)
# Create an `sf` object from the bounding box
sf <- st_as_sfc(bb)
# Plot the las object using `plot()` from the `lidR` package
plot(las)
# Extract the coordinates of the `sf` object using `st_coordinates()` from the `sf` package
coords <- st_coordinates(sf)
# Calculate the convex hull of the `sf` object using `chull()` from the `grDevices` package
hull <- chull(coords[,1], coords[,2])
# Calculate the Delaunay triangulation of the `sf` object using `delaunayn()` from the `geometry` package
triangles <- geometry::delaunayn(coords[hull,])
# Set the plot view to include the triangle coordinates
rgl.viewpoint(userMatrix = rotationMatrix(pi/2, 0, 0, 1))
rgl.viewpoint(theta = -60, phi = 30, zoom = 0.8)
# Add the `sf` object to the RGL device using `rgl.triangles()` from the `rgl` package
rgl.triangles(coords[hull, 1], coords[hull, 2], coords[hull, 3], triangles, col = "red", alpha = 0.5)
shp <- vect("Outputs\\ShrubDelineation\\shrubtops_vwf.shp")
ras <- rast("Outputs\\ShrubDelineation\\IndvShrubs_Silva_VWF.tif")
st_crs(shp)
st_crs(ras)
st_crs(las)
st_crs(las)
plot(las) |> add_dtm3d(ras) |> add_treetops3d(shp)
plot(las) |> add_treetops3d(shp)
sf <- st_as_sf(shp)
plot(las) |> add_treetops3d(sf)
plot(las) |> add_treetops3d(sf, z = "height")
las <- readLAS("Outputs\\Clipped_SubsetPC\\PC_height_Normalized_shrub.las")
plot(las) |> add_treetops3d(sf, z = "height")
plot(las) |> add_treetops3d(sf, z = "height", size = 1)
?add_treetops3d
plot(las) |> add_dtm3d(ras) |>  add_treetops3d(sf, z = "height", size = 1)
plot(las) |> add_dtm3d(ras)
plot(las, color = "RGB") |> add_dtm3d(ras)
plot(las, color = "RGB") |> add_dtm3d(ras, bg = "black", clear_artifacts = TRUE)
plot(las, color = "RGB") |> add_dtm3d(ras, bg = "black", clear_artifacts = TRUE) |> add_treetops3d(sf, radius = 1, fastTransparency = TRUE, alpha = 0.5)
plot(las, color = "RGB") |> add_dtm3d(ras, bg = "black", clear_artifacts = TRUE) |> add_treetops3d(sf, radius = 1, fastTransparency = TRUE, alpha = 0.5, z = "height")
plot(las, color = "RGB") |> add_dtm3d(ras, bg = "black", clear_artifacts = TRUE) |> add_treetops3d(sf, radius = 0.5, fastTransparency = TRUE, alpha = 0.5, z = "height")
plot(las, color = "RGB") |> add_dtm3d(ras, bg = "black", clear_artifacts = TRUE) |> add_treetops3d(sf, radius = 0.01, fastTransparency = TRUE, alpha = 0.5, z = "height")
plot(las, color = "RGB") |> add_dtm3d(ras, bg = "black", clear_artifacts = TRUE) |> add_treetops3d(sf, radius = 0.1, fastTransparency = TRUE, alpha = 0.5, z = "height")
plot(las, color = "RGB") |> add_treetops3d(sf, radius = 0.1, fastTransparency = TRUE, alpha = 0.5, z = "height")
plot(las, color = "RGB") |> add_treetops3d(sf, radius = 0.1, fastTransparency = TRUE, alpha = 0.8, z = "height")
plot(las, color = "RGB") |> add_treetops3d(sf, radius = 0.1, fastTransparency = TRUE, alpha = 0.8, z = "height") |> add_dtm3d(ras, bg = "black", clear_artifacts = TRUE)
plot(las, color = "RGB") |> add_treetops3d(sf, radius = 0.1, fastTransparency = TRUE, alpha = 0.8, z = (0.5+"height")
)
sf$height <- (sf$heigh + 0.5)
plot(las, color = "RGB") |> add_treetops3d(sf, radius = 0.1, fastTransparency = TRUE, alpha = 0.8, z = "height") |> add_dtm3d(ras, bg = "black", clear_artifacts = TRUE)
sf <- st_as_sf(shp)
sf$height <- (sf$height + (0.1*sf$height))
plot(las, color = "RGB") |> add_treetops3d(sf, radius = 0.1, fastTransparency = TRUE, alpha = 0.8, z = "height") |> add_dtm3d(ras, bg = "black", clear_artifacts = TRUE)
plot(las, color = "RGB") |> add_treetops3d(sf, radius = 0.1, fastTransparency = TRUE, alpha = 0.8, z = "height")
options(rgl.useNULL=TRUE)
options(wgl.useNULL=TRUE)
require(lidR)
require(terra)
require(raster)
require(viridisLite)
require(ForestTools)
require(sp)
require(sf)
require(rgdal)
require(rayshader)
require(webshot2)
las <- readLAS("Outputs\\Clipped_SubsetPC\\sub_subset_PointCloud.las")
rm(las)
ground_points <- readLAS("Outputs\\Clipped_SubsetPC\\ground_Classif.las")
ground_points <- readLAS("Outputs\\Clipped_SubsetPC\\ground_Classif.las")
plot(ground_points,
size = 3,
bg = "white",
color = "Classification",
pal = forest.colors(2))
rgl::rglwidget()
plot(ground_points,
size = 3,
bg = "white",
color = "Classification",
pal = forest.colors(2))
rgl::rglwidget()
## Defining dtm function arguments
cs_dtm <- 1.0 # output cellsize of the dtm
# min cellsize possible is 0.01, when 0.001 is set, then the grid_terrain function will output "Error: memory exhausted (limit reached?)" and "Error: no more error handlers available (recursive errors?); invoking 'abort' restart"
# as resolution of processed DEM was around 0.70 m, cell size set to 1.0 (equivalent to 1 m as native coordinate system is UTM in m)
## Creating dtm
dtm <- grid_terrain(ground_points, cs_dtm, knnidw()) # using Invert distance weighting (IDW) to create DTM
plot_dtm3d(dtm)
rgl::rglwidget()
hnorm <- readLAS("Outputs\\Clipped_SubsetPC\\height_Normalized.las")
## Load CHM
chm <- raster("Outputs\\DSM_DTM_CHM_files\\sub_subsetCHM_point02.tif")
## Load CHM
chm <- raster("Outputs\\DSM_DTM_CHM_files\\sub_subsetCHM_point02.tif")
library(rLiDAR)
schm <- rLiDAR::CHMsmoothing(chm, "mean", 3)
detach("package:rLiDAR", unload = TRUE)
par(mfrow = c(1,2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1))
shrubtops_lmf <- locate_trees(schm,lmf(2, hmin = 0, shape = "circular"))
## Set function for determining variable window radius
winFunction <- function(x){x * 0.04}
### Set minimum shrub height (shrub tops below this height will not be detected)
minHgt <- 0.001
### Detect shrub tops in canopy height model
shrubtops_vwf <- vwf(schm, winFunction, minHgt)
crowns_silva_lmf <- silva2016(schm,shrubtops_lmf, max_cr_factor = 1.56, exclusion = 0.001)() # max_cr_factor set by average height to d1 ratio from field data
crowns_silva_vwf <- silva2016(schm,shrubtops_vwf, max_cr_factor = 1.56, exclusion = 0.001)()
plot(schm, col = height.colors(25), main = "Shrub delineation silva2016 for lmf")
plot(crowns_silva_lmf, add = TRUE, legend = FALSE, col = 'black')
plot(schm, col = height.colors(25), main = "Shrub delineation silva2016 for vwf")
plot(crowns_silva_vwf, add = TRUE, legend = FALSE, col = 'black')
plot(schm, col = height.colors(25), main = "Shrub delineation silva2016 for LMF")
plot(crowns_silva_lmf, add = TRUE, legend = FALSE, col = 'black')
plot(schm, col = height.colors(25), main = "Shrub delineation silva2016 for VWF")
plot(crowns_silva_vwf, add = TRUE, legend = FALSE, col = 'black')
par(mfrow = c(1,2))
plot(chm, col = height.colors(25), main = "CHM")
legend("right", legend = c("height"), fill = height.colors(25), bty = "n")
plot(schm, col = height.colors(25), main = "Smoothed CHM")
legend("right", legend = c("height"), fill = height.colors(25), bty = "n")
par(mfrow = c(1,1))
par(mfrow = c(1,2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1))
par(mfrow = c(1,2), mar=c(5, 5, 2, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(5, 6, 2, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(5, 1, 2, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(5, 2, 2, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(5, 2.5, 2, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(2.5, 2.5, 2, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(2.5, 2.5, 1, 1))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(5, 4, 4, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(5, 8, 4, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(5, 3, 4, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(3, 3, 4, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(1, 3, 4, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(5, 3, 4, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(5, 3, 2, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(5, 2, 2, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(5, 2.5, 2, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
# Set the plotting margins and plotting region size
par(mfrow = c(1,2), mar=c(5, 4, 4, 2), fig.width=6.5, fig.height=5)
# Create the plots
plot(chm, col = height.colors(25), main = "CHM")
legend("topright", legend="Height", fill = height.colors(25), bty = "n", x.intersp = 0.5, y.intersp = 0.5)
plot(schm, col = height.colors(25), main = "Smoothed CHM")
legend("topright", legend="Height", fill = height.colors(25), bty = "n", x.intersp = 0.5, y.intersp = 0.5)
# Reset the plotting margins and plotting region size
par(mfrow = c(1,1), mar=c(5, 4, 4, 2), fig.width=7, fig.height=7)
# Set the plotting margins
par(mfrow = c(1,2), mar=c(5, 4, 4, 2))
# Create the plots
plot(chm, col = height.colors(25), main = "CHM")
legend("topright", legend = "Height", fill = height.colors(25), bty = "n", x.intersp = 0.5, y.intersp = 0.5)
plot(schm, col = height.colors(25), main = "Smoothed CHM")
legend("topright", legend = "Height", fill = height.colors(25), bty = "n", x.intersp = 0.5, y.intersp = 0.5)
# Reset the plotting margins
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(5, 4, 4, 2))
# Create the plots
plot(chm, col = height.colors(25), main = "CHM")
legend("topright", x.intersp = 0.5, y.intersp = 0.5)
plot
?plot
par(mfrow = c(1,2), mar=c(5, 2.5, 2, 2))
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(5, 2.5, 2, 2), fig.width = 5)
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
par(mfrow = c(1,2), mar=c(5, 2.5, 2, 2), fig.width = 10)
plot(chm,
col = height.colors(25),
main = "CHM")
plot(schm,
col = height.colors(25),
main = "Smoothed CHM")
par(mfrow = c(1,1), mar=c(5, 4, 4, 2))
# Import PC segmented individual shrub poind cloud (if already run previous code in this code cell)
shrub_las_NonGroundOnlyPC < readLAS("Outputs\\ShrubDelineation\\ShrubSeg_GroundRemoved.las")
# Import PC segmented individual shrub poind cloud (if already run previous code in this code cell)
shrub_las_NonGroundOnlyPC < readLAS("Outputs\\ShrubDelineation\\ShrubSeg_GroundRemoved.las")
# Import PC segmented individual shrub poind cloud (if already run previous code in this code cell)
shrub_las_NonGroundOnlyPC <- readLAS("Outputs\\ShrubDelineation\\ShrubSeg_GroundRemoved.las")
shrubs_outline <- delineate_crowns(shrub_las_NonGroundOnlyPC, attribute = "treeID", type = "concave", concavity = 2) # use "concave" to delineate crowns to PC segments
spplot(shrubs_outline, "treeID", col.regions=random.colors(length(unique(shrub_las_NonGroundOnlyPC@data$treeID))))
plot(shrub_las_NonGroundOnlyPC,
size = 3,
color = 'treeID',
pal = pastel.colors(50),
bg = "white")
plot(shrub_las_NonGroundOnlyPC,
size = 3,
color = 'treeID',
pal = pastel.colors(50),
bg = "white")
rgl::rglwidget()
options(rgl.useNULL=TRUE)
options(wgl.useNULL=TRUE)
shrub_las_NonGroundOnlyPC <- readLAS("Outputs\\ShrubDelineation\\ShrubSeg_GroundRemoved.las")
plot(shrub_las_NonGroundOnlyPC,
size = 3,
color = 'treeID',
pal = pastel.colors(50),
bg = "white")
shrub_las_NonGroundOnlyPC <- readLAS("Outputs\\ShrubDelineation\\ShrubSeg_GroundRemoved.las")
plot(shrub_las_NonGroundOnlyPC,
size = 3,
color = 'treeID',
pal = colorRampPalette(pastel.colors(50)),
bg = "white")
lidR::plot(shrub_las_NonGroundOnlyPC,
size = 3,
color = 'treeID',
pal = colorRampPalette(pastel.colors(50)),
bg = "white")
shrub_las_Widget <- rgl::rglwidget()
saveWidget(shrub_las_Widget, "Outputs\\ShrubDelineation\\shrub_las_Widget.html")
rgl::saveWidget(shrub_las_Widget, "Outputs\\ShrubDelineation\\shrub_las_Widget.html")
require(htmlwidgets)
require(htmltools)
saveWidget(shrub_las_Widget, "Outputs\\ShrubDelineation\\shrub_las_Widget.html")
